// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: faq.sql

package repository

import (
	"context"
)

const createFAQ = `-- name: CreateFAQ :one
INSERT INTO "FAQ" (question, answer) 
VALUES ($1, $2)
RETURNING id, question, answer
`

type CreateFAQParams struct {
	Question string `json:"question"`
	Answer   string `json:"answer"`
}

func (q *Queries) CreateFAQ(ctx context.Context, arg CreateFAQParams) (FAQ, error) {
	row := q.db.QueryRow(ctx, createFAQ, arg.Question, arg.Answer)
	var i FAQ
	err := row.Scan(&i.ID, &i.Question, &i.Answer)
	return i, err
}

const getAllFaqs = `-- name: GetAllFaqs :many
SELECT id, question, answer FROM "FAQ"
`

func (q *Queries) GetAllFaqs(ctx context.Context) ([]FAQ, error) {
	rows, err := q.db.Query(ctx, getAllFaqs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FAQ
	for rows.Next() {
		var i FAQ
		if err := rows.Scan(&i.ID, &i.Question, &i.Answer); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFAQ = `-- name: UpdateFAQ :exec
UPDATE "FAQ"
SET
    question = $2,
    answer = $2
WHERE id = $1
RETURNING id, question, answer
`

type UpdateFAQParams struct {
	ID       int32  `json:"id"`
	Question string `json:"question"`
}

func (q *Queries) UpdateFAQ(ctx context.Context, arg UpdateFAQParams) error {
	_, err := q.db.Exec(ctx, updateFAQ, arg.ID, arg.Question)
	return err
}
