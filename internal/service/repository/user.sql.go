// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/jackc/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "User" (id, first_name, last_name, phone_number, referal_code, referred_by, language, profile_pic) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, first_name, last_name, phone_number, referal_code, referal_count, referred_by, language, profile_pic, net_balance, created_at
`

type CreateUserParams struct {
	ID          int64          `json:"id"`
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	PhoneNumber string         `json:"phone_number"`
	ReferalCode int64          `json:"referal_code"`
	ReferredBy  sql.NullInt64  `json:"referred_by"`
	Language    sql.NullString `json:"language"`
	ProfilePic  sql.NullString `json:"profile_pic"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.ReferalCode,
		arg.ReferredBy,
		arg.Language,
		arg.ProfilePic,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.ReferalCode,
		&i.ReferalCount,
		&i.ReferredBy,
		&i.Language,
		&i.ProfilePic,
		&i.NetBalance,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "User" WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "User" 
SET net_balance = $2, referal_count = $3 
WHERE id = $1 
RETURNING id, first_name, last_name, phone_number, referal_code, referal_count, referred_by, language, profile_pic, net_balance, created_at
`

type UpdateUserParams struct {
	ID           int64          `json:"id"`
	NetBalance   pgtype.Numeric `json:"net_balance"`
	ReferalCount sql.NullInt32  `json:"referal_count"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.NetBalance, arg.ReferalCount)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.ReferalCode,
		&i.ReferalCount,
		&i.ReferredBy,
		&i.Language,
		&i.ProfilePic,
		&i.NetBalance,
		&i.CreatedAt,
	)
	return i, err
}
